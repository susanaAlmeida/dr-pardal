@charset "UTF-8";

/// Sets a value to a Map by the map path
///
/// @access private
///
/// @param  {Map}    $map   The Map
/// @param  {String} $path  The map path
/// @param  {*|Null} $value The value to set
///
/// @return {Map}           A new Map
@function config-map-set($map, $path, $value) {
  $map: list-map-check($map);
  $keys: str-split($path, $config-delimiter);
  $length: length($keys);

  $result: (nth($keys, $length): $value);

  @if $length > 1 {
    @for $i from 1 through $length - 1 {
      $path: "";
      $key: nth($keys, 1);

      $j: $length - $i;
      $key: nth($keys, $j);

      $path: str-join(list-slice($keys, 1, $j), $config-delimiter);

      @if config-map-has($map, $path) {
        $value: config-map-get($map, $path);

        @if type-of($value) == "map" {
          $result: config-map-merge(($key: $value), ($key: $result));
        } @else {
          $result: ($key: $result);
        }
      } @else {
        $result: ($key: $result);
      }
    }
  }

  $map: config-map-merge($map, $result);

  @return $map;
}

/// Gets a value from a Map by the map path
///
/// @access private
///
/// @param  {Map}    $map  The Map
/// @param  {String} $path The map path
///
/// @return {*}            The value of the map path
@function config-map-get($map, $path) {
  $keys: str-split($path, $config-delimiter);
  $value: list-map-check($map);

  @each $key in $keys {
    @if type-of($value) != "map" or not map-has-key($value, $key) {
      @warn "The path '#{$path}' doesn\'t exist.";

      @return null;
    }

    $value: map-get($value, $key);
  }

  @return $value;
}

/// Returns whether the key of a map path exists in a Map
///
/// @access private
///
/// @param  {Map}    $map The Map
/// @param  {String} $key The map path
///
/// @return {Bool}       True if the map path has a value, otherwise false
@function config-map-has($map, $key) {
  $keys: str-split($key, $config-delimiter);
  $value: list-map-check($map);

  @each $key in $keys {
    @if type-of($value) != "map" or not map-has-key($value, $key) {
      @return false;
    }

    $value: map-get($value, $key);
  }

  @return true;
}

/// Recursively merges one or more maps
///
/// @access private
///
/// @param  {Map} $maps... The map(s) to merge
///
/// @return {Map}          The merged map
@function config-map-merge($maps...) {
  $result: nth($maps, 1);

  @for $i from 1 through length($maps) - 1 {
    @each $key, $value in nth($maps, $i + 1) {
      @if type-of($result) != "map" {
        $result: ($key: $value);
      }

      @if type-of($value) == "map" {
        $value: config-map-merge(map-get($result, $key), $value);
      }

      @if $key != null {
        $result: map-merge($result, ($key: $value));
      }
    }
  }

  @return $result;
}
